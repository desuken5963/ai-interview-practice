// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef1 "time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	externalRef0 "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Company defines model for Company.
type Company struct {
	BusinessDescription *string        `json:"business_description"`
	CreatedAt           time.Time      `json:"created_at"`
	CustomFields        *[]CustomField `json:"custom_fields,omitempty"`
	Id                  int64          `json:"id"`
	JobPostings         *[]JobPosting  `json:"job_postings,omitempty"`
	Name                string         `json:"name"`
	UpdatedAt           time.Time      `json:"updated_at"`
}

// CompanyInput defines model for CompanyInput.
type CompanyInput struct {
	BusinessDescription *string             `json:"business_description"`
	CustomFields        *[]CustomFieldInput `json:"custom_fields,omitempty"`
	Name                string              `json:"name"`
}

// CustomField defines model for CustomField.
type CustomField struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	FieldName string    `json:"field_name"`
	Id        int64     `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
}

// CustomFieldInput defines model for CustomFieldInput.
type CustomFieldInput struct {
	Content   string `json:"content"`
	FieldName string `json:"field_name"`
}

// JobCustomField defines model for JobCustomField.
type JobCustomField struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	FieldName string    `json:"field_name"`
	Id        int64     `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
}

// JobCustomFieldInput defines model for JobCustomFieldInput.
type JobCustomFieldInput struct {
	Content   string `json:"content"`
	FieldName string `json:"field_name"`
}

// JobPosting defines model for JobPosting.
type JobPosting struct {
	CompanyId    int64             `json:"company_id"`
	CreatedAt    time.Time         `json:"created_at"`
	CustomFields *[]JobCustomField `json:"custom_fields,omitempty"`
	Description  *string           `json:"description"`
	Id           int64             `json:"id"`
	Title        string            `json:"title"`
	UpdatedAt    time.Time         `json:"updated_at"`
}

// JobPostingInput defines model for JobPostingInput.
type JobPostingInput struct {
	CompanyId    int64                  `json:"company_id"`
	CustomFields *[]JobCustomFieldInput `json:"custom_fields,omitempty"`
	Description  *string                `json:"description"`
	Title        string                 `json:"title"`
}

// GetCompaniesParams defines parameters for GetCompanies.
type GetCompaniesParams struct {
	// Page ページ番号
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit 1ページあたりの件数。デフォルト値は6です。
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostCompaniesJSONRequestBody defines body for PostCompanies for application/json ContentType.
type PostCompaniesJSONRequestBody = CompanyInput

// PutCompaniesIdJSONRequestBody defines body for PutCompaniesId for application/json ContentType.
type PutCompaniesIdJSONRequestBody = CompanyInput

// PostJobPostingsJSONRequestBody defines body for PostJobPostings for application/json ContentType.
type PostJobPostingsJSONRequestBody = JobPostingInput

// PutJobPostingsIdJSONRequestBody defines body for PutJobPostingsId for application/json ContentType.
type PutJobPostingsIdJSONRequestBody = JobPostingInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCompanies request
	GetCompanies(ctx context.Context, params *GetCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCompaniesWithBody request with any body
	PostCompaniesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCompanies(ctx context.Context, body PostCompaniesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCompaniesId request
	DeleteCompaniesId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCompaniesIdWithBody request with any body
	PutCompaniesIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCompaniesId(ctx context.Context, id int64, body PutCompaniesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobPostingsWithBody request with any body
	PostJobPostingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobPostings(ctx context.Context, body PostJobPostingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobPostingsId request
	DeleteJobPostingsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobPostingsIdWithBody request with any body
	PutJobPostingsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobPostingsId(ctx context.Context, id int64, body PutJobPostingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCompanies(ctx context.Context, params *GetCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompaniesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompaniesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompaniesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompanies(ctx context.Context, body PostCompaniesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompaniesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCompaniesId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCompaniesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCompaniesIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCompaniesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCompaniesId(ctx context.Context, id int64, body PutCompaniesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCompaniesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobPostingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobPostingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobPostings(ctx context.Context, body PostJobPostingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobPostingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobPostingsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobPostingsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobPostingsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobPostingsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobPostingsId(ctx context.Context, id int64, body PutJobPostingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobPostingsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCompaniesRequest generates requests for GetCompanies
func NewGetCompaniesRequest(server string, params *GetCompaniesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCompaniesRequest calls the generic PostCompanies builder with application/json body
func NewPostCompaniesRequest(server string, body PostCompaniesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCompaniesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCompaniesRequestWithBody generates requests for PostCompanies with any type of body
func NewPostCompaniesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCompaniesIdRequest generates requests for DeleteCompaniesId
func NewDeleteCompaniesIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCompaniesIdRequest calls the generic PutCompaniesId builder with application/json body
func NewPutCompaniesIdRequest(server string, id int64, body PutCompaniesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCompaniesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCompaniesIdRequestWithBody generates requests for PutCompaniesId with any type of body
func NewPutCompaniesIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJobPostingsRequest calls the generic PostJobPostings builder with application/json body
func NewPostJobPostingsRequest(server string, body PostJobPostingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobPostingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJobPostingsRequestWithBody generates requests for PostJobPostings with any type of body
func NewPostJobPostingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-postings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobPostingsIdRequest generates requests for DeleteJobPostingsId
func NewDeleteJobPostingsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-postings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJobPostingsIdRequest calls the generic PutJobPostingsId builder with application/json body
func NewPutJobPostingsIdRequest(server string, id int64, body PutJobPostingsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobPostingsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutJobPostingsIdRequestWithBody generates requests for PutJobPostingsId with any type of body
func NewPutJobPostingsIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-postings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCompaniesWithResponse request
	GetCompaniesWithResponse(ctx context.Context, params *GetCompaniesParams, reqEditors ...RequestEditorFn) (*GetCompaniesResponse, error)

	// PostCompaniesWithBodyWithResponse request with any body
	PostCompaniesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompaniesResponse, error)

	PostCompaniesWithResponse(ctx context.Context, body PostCompaniesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompaniesResponse, error)

	// DeleteCompaniesIdWithResponse request
	DeleteCompaniesIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteCompaniesIdResponse, error)

	// PutCompaniesIdWithBodyWithResponse request with any body
	PutCompaniesIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCompaniesIdResponse, error)

	PutCompaniesIdWithResponse(ctx context.Context, id int64, body PutCompaniesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCompaniesIdResponse, error)

	// PostJobPostingsWithBodyWithResponse request with any body
	PostJobPostingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobPostingsResponse, error)

	PostJobPostingsWithResponse(ctx context.Context, body PostJobPostingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobPostingsResponse, error)

	// DeleteJobPostingsIdWithResponse request
	DeleteJobPostingsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteJobPostingsIdResponse, error)

	// PutJobPostingsIdWithBodyWithResponse request with any body
	PutJobPostingsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobPostingsIdResponse, error)

	PutJobPostingsIdWithResponse(ctx context.Context, id int64, body PutJobPostingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobPostingsIdResponse, error)
}

type GetCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []Company `json:"companies"`
		Limit     int       `json:"limit"`
		Page      int       `json:"page"`
		Total     int       `json:"total"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Company
	JSON400      *struct {
		Error *struct {
			Code    *string `json:"code,omitempty"`
			Details *[]struct {
				Field   *string `json:"field,omitempty"`
				Message *string `json:"message,omitempty"`
			} `json:"details,omitempty"`
			Message *string `json:"message,omitempty"`
		} `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCompaniesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCompaniesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCompaniesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCompaniesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Company
}

// Status returns HTTPResponse.Status
func (r PutCompaniesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCompaniesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobPostingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobPosting
}

// Status returns HTTPResponse.Status
func (r PostJobPostingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobPostingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobPostingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJobPostingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobPostingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobPostingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobPosting
}

// Status returns HTTPResponse.Status
func (r PutJobPostingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobPostingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCompaniesWithResponse request returning *GetCompaniesResponse
func (c *ClientWithResponses) GetCompaniesWithResponse(ctx context.Context, params *GetCompaniesParams, reqEditors ...RequestEditorFn) (*GetCompaniesResponse, error) {
	rsp, err := c.GetCompanies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompaniesResponse(rsp)
}

// PostCompaniesWithBodyWithResponse request with arbitrary body returning *PostCompaniesResponse
func (c *ClientWithResponses) PostCompaniesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompaniesResponse, error) {
	rsp, err := c.PostCompaniesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompaniesResponse(rsp)
}

func (c *ClientWithResponses) PostCompaniesWithResponse(ctx context.Context, body PostCompaniesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompaniesResponse, error) {
	rsp, err := c.PostCompanies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompaniesResponse(rsp)
}

// DeleteCompaniesIdWithResponse request returning *DeleteCompaniesIdResponse
func (c *ClientWithResponses) DeleteCompaniesIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteCompaniesIdResponse, error) {
	rsp, err := c.DeleteCompaniesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCompaniesIdResponse(rsp)
}

// PutCompaniesIdWithBodyWithResponse request with arbitrary body returning *PutCompaniesIdResponse
func (c *ClientWithResponses) PutCompaniesIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCompaniesIdResponse, error) {
	rsp, err := c.PutCompaniesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCompaniesIdResponse(rsp)
}

func (c *ClientWithResponses) PutCompaniesIdWithResponse(ctx context.Context, id int64, body PutCompaniesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCompaniesIdResponse, error) {
	rsp, err := c.PutCompaniesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCompaniesIdResponse(rsp)
}

// PostJobPostingsWithBodyWithResponse request with arbitrary body returning *PostJobPostingsResponse
func (c *ClientWithResponses) PostJobPostingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobPostingsResponse, error) {
	rsp, err := c.PostJobPostingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobPostingsResponse(rsp)
}

func (c *ClientWithResponses) PostJobPostingsWithResponse(ctx context.Context, body PostJobPostingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobPostingsResponse, error) {
	rsp, err := c.PostJobPostings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobPostingsResponse(rsp)
}

// DeleteJobPostingsIdWithResponse request returning *DeleteJobPostingsIdResponse
func (c *ClientWithResponses) DeleteJobPostingsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteJobPostingsIdResponse, error) {
	rsp, err := c.DeleteJobPostingsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobPostingsIdResponse(rsp)
}

// PutJobPostingsIdWithBodyWithResponse request with arbitrary body returning *PutJobPostingsIdResponse
func (c *ClientWithResponses) PutJobPostingsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobPostingsIdResponse, error) {
	rsp, err := c.PutJobPostingsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobPostingsIdResponse(rsp)
}

func (c *ClientWithResponses) PutJobPostingsIdWithResponse(ctx context.Context, id int64, body PutJobPostingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobPostingsIdResponse, error) {
	rsp, err := c.PutJobPostingsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobPostingsIdResponse(rsp)
}

// ParseGetCompaniesResponse parses an HTTP response from a GetCompaniesWithResponse call
func ParseGetCompaniesResponse(rsp *http.Response) (*GetCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []Company `json:"companies"`
			Limit     int       `json:"limit"`
			Page      int       `json:"page"`
			Total     int       `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCompaniesResponse parses an HTTP response from a PostCompaniesWithResponse call
func ParsePostCompaniesResponse(rsp *http.Response) (*PostCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *struct {
				Code    *string `json:"code,omitempty"`
				Details *[]struct {
					Field   *string `json:"field,omitempty"`
					Message *string `json:"message,omitempty"`
				} `json:"details,omitempty"`
				Message *string `json:"message,omitempty"`
			} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteCompaniesIdResponse parses an HTTP response from a DeleteCompaniesIdWithResponse call
func ParseDeleteCompaniesIdResponse(rsp *http.Response) (*DeleteCompaniesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCompaniesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCompaniesIdResponse parses an HTTP response from a PutCompaniesIdWithResponse call
func ParsePutCompaniesIdResponse(rsp *http.Response) (*PutCompaniesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCompaniesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostJobPostingsResponse parses an HTTP response from a PostJobPostingsWithResponse call
func ParsePostJobPostingsResponse(rsp *http.Response) (*PostJobPostingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobPostingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobPosting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteJobPostingsIdResponse parses an HTTP response from a DeleteJobPostingsIdWithResponse call
func ParseDeleteJobPostingsIdResponse(rsp *http.Response) (*DeleteJobPostingsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobPostingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutJobPostingsIdResponse parses an HTTP response from a PutJobPostingsIdWithResponse call
func ParsePutJobPostingsIdResponse(rsp *http.Response) (*PutJobPostingsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobPostingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobPosting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 企業求人情報の取得
	// (GET /companies)
	GetCompanies(c *gin.Context, params GetCompaniesParams)
	// 企業情報の作成
	// (POST /companies)
	PostCompanies(c *gin.Context)
	// 企業情報の削除
	// (DELETE /companies/{id})
	DeleteCompaniesId(c *gin.Context, id int64)
	// 企業情報の更新
	// (PUT /companies/{id})
	PutCompaniesId(c *gin.Context, id int64)
	// 求人情報の作成
	// (POST /job-postings)
	PostJobPostings(c *gin.Context)
	// 求人情報の削除
	// (DELETE /job-postings/{id})
	DeleteJobPostingsId(c *gin.Context, id int64)
	// 求人情報の更新
	// (PUT /job-postings/{id})
	PutJobPostingsId(c *gin.Context, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCompanies operation middleware
func (siw *ServerInterfaceWrapper) GetCompanies(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompaniesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCompanies(c, params)
}

// PostCompanies operation middleware
func (siw *ServerInterfaceWrapper) PostCompanies(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCompanies(c)
}

// DeleteCompaniesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCompaniesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCompaniesId(c, id)
}

// PutCompaniesId operation middleware
func (siw *ServerInterfaceWrapper) PutCompaniesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCompaniesId(c, id)
}

// PostJobPostings operation middleware
func (siw *ServerInterfaceWrapper) PostJobPostings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostJobPostings(c)
}

// DeleteJobPostingsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteJobPostingsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteJobPostingsId(c, id)
}

// PutJobPostingsId operation middleware
func (siw *ServerInterfaceWrapper) PutJobPostingsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutJobPostingsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/companies", wrapper.GetCompanies)
	router.POST(options.BaseURL+"/companies", wrapper.PostCompanies)
	router.DELETE(options.BaseURL+"/companies/:id", wrapper.DeleteCompaniesId)
	router.PUT(options.BaseURL+"/companies/:id", wrapper.PutCompaniesId)
	router.POST(options.BaseURL+"/job-postings", wrapper.PostJobPostings)
	router.DELETE(options.BaseURL+"/job-postings/:id", wrapper.DeleteJobPostingsId)
	router.PUT(options.BaseURL+"/job-postings/:id", wrapper.PutJobPostingsId)
}

type GetCompaniesRequestObject struct {
	Params GetCompaniesParams
}

type GetCompaniesResponseObject interface {
	VisitGetCompaniesResponse(w http.ResponseWriter) error
}

type GetCompanies200JSONResponse struct {
	Companies []Company `json:"companies"`
	Limit     int       `json:"limit"`
	Page      int       `json:"page"`
	Total     int       `json:"total"`
}

func (response GetCompanies200JSONResponse) VisitGetCompaniesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCompanies400Response struct {
}

func (response GetCompanies400Response) VisitGetCompaniesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetCompanies500Response struct {
}

func (response GetCompanies500Response) VisitGetCompaniesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostCompaniesRequestObject struct {
	Body *PostCompaniesJSONRequestBody
}

type PostCompaniesResponseObject interface {
	VisitPostCompaniesResponse(w http.ResponseWriter) error
}

type PostCompanies201JSONResponse Company

func (response PostCompanies201JSONResponse) VisitPostCompaniesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanies400JSONResponse struct {
	Error *struct {
		Code    *string `json:"code,omitempty"`
		Details *[]struct {
			Field   *string `json:"field,omitempty"`
			Message *string `json:"message,omitempty"`
		} `json:"details,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"error,omitempty"`
}

func (response PostCompanies400JSONResponse) VisitPostCompaniesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanies500Response struct {
}

func (response PostCompanies500Response) VisitPostCompaniesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteCompaniesIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteCompaniesIdResponseObject interface {
	VisitDeleteCompaniesIdResponse(w http.ResponseWriter) error
}

type DeleteCompaniesId204Response struct {
}

func (response DeleteCompaniesId204Response) VisitDeleteCompaniesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCompaniesId404Response struct {
}

func (response DeleteCompaniesId404Response) VisitDeleteCompaniesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteCompaniesId500Response struct {
}

func (response DeleteCompaniesId500Response) VisitDeleteCompaniesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutCompaniesIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PutCompaniesIdJSONRequestBody
}

type PutCompaniesIdResponseObject interface {
	VisitPutCompaniesIdResponse(w http.ResponseWriter) error
}

type PutCompaniesId200JSONResponse Company

func (response PutCompaniesId200JSONResponse) VisitPutCompaniesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCompaniesId400Response struct {
}

func (response PutCompaniesId400Response) VisitPutCompaniesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutCompaniesId404Response struct {
}

func (response PutCompaniesId404Response) VisitPutCompaniesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutCompaniesId500Response struct {
}

func (response PutCompaniesId500Response) VisitPutCompaniesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostJobPostingsRequestObject struct {
	Body *PostJobPostingsJSONRequestBody
}

type PostJobPostingsResponseObject interface {
	VisitPostJobPostingsResponse(w http.ResponseWriter) error
}

type PostJobPostings201JSONResponse JobPosting

func (response PostJobPostings201JSONResponse) VisitPostJobPostingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostJobPostings400Response struct {
}

func (response PostJobPostings400Response) VisitPostJobPostingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostJobPostings500Response struct {
}

func (response PostJobPostings500Response) VisitPostJobPostingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteJobPostingsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteJobPostingsIdResponseObject interface {
	VisitDeleteJobPostingsIdResponse(w http.ResponseWriter) error
}

type DeleteJobPostingsId204Response struct {
}

func (response DeleteJobPostingsId204Response) VisitDeleteJobPostingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteJobPostingsId404Response struct {
}

func (response DeleteJobPostingsId404Response) VisitDeleteJobPostingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteJobPostingsId500Response struct {
}

func (response DeleteJobPostingsId500Response) VisitDeleteJobPostingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutJobPostingsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PutJobPostingsIdJSONRequestBody
}

type PutJobPostingsIdResponseObject interface {
	VisitPutJobPostingsIdResponse(w http.ResponseWriter) error
}

type PutJobPostingsId200JSONResponse JobPosting

func (response PutJobPostingsId200JSONResponse) VisitPutJobPostingsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutJobPostingsId400Response struct {
}

func (response PutJobPostingsId400Response) VisitPutJobPostingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutJobPostingsId404Response struct {
}

func (response PutJobPostingsId404Response) VisitPutJobPostingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutJobPostingsId500Response struct {
}

func (response PutJobPostingsId500Response) VisitPutJobPostingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 企業求人情報の取得
	// (GET /companies)
	GetCompanies(ctx context.Context, request GetCompaniesRequestObject) (GetCompaniesResponseObject, error)
	// 企業情報の作成
	// (POST /companies)
	PostCompanies(ctx context.Context, request PostCompaniesRequestObject) (PostCompaniesResponseObject, error)
	// 企業情報の削除
	// (DELETE /companies/{id})
	DeleteCompaniesId(ctx context.Context, request DeleteCompaniesIdRequestObject) (DeleteCompaniesIdResponseObject, error)
	// 企業情報の更新
	// (PUT /companies/{id})
	PutCompaniesId(ctx context.Context, request PutCompaniesIdRequestObject) (PutCompaniesIdResponseObject, error)
	// 求人情報の作成
	// (POST /job-postings)
	PostJobPostings(ctx context.Context, request PostJobPostingsRequestObject) (PostJobPostingsResponseObject, error)
	// 求人情報の削除
	// (DELETE /job-postings/{id})
	DeleteJobPostingsId(ctx context.Context, request DeleteJobPostingsIdRequestObject) (DeleteJobPostingsIdResponseObject, error)
	// 求人情報の更新
	// (PUT /job-postings/{id})
	PutJobPostingsId(ctx context.Context, request PutJobPostingsIdRequestObject) (PutJobPostingsIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCompanies operation middleware
func (sh *strictHandler) GetCompanies(ctx *gin.Context, params GetCompaniesParams) {
	var request GetCompaniesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanies(ctx, request.(GetCompaniesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCompaniesResponseObject); ok {
		if err := validResponse.VisitGetCompaniesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCompanies operation middleware
func (sh *strictHandler) PostCompanies(ctx *gin.Context) {
	var request PostCompaniesRequestObject

	var body PostCompaniesJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanies(ctx, request.(PostCompaniesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCompaniesResponseObject); ok {
		if err := validResponse.VisitPostCompaniesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCompaniesId operation middleware
func (sh *strictHandler) DeleteCompaniesId(ctx *gin.Context, id int64) {
	var request DeleteCompaniesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCompaniesId(ctx, request.(DeleteCompaniesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCompaniesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCompaniesIdResponseObject); ok {
		if err := validResponse.VisitDeleteCompaniesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCompaniesId operation middleware
func (sh *strictHandler) PutCompaniesId(ctx *gin.Context, id int64) {
	var request PutCompaniesIdRequestObject

	request.Id = id

	var body PutCompaniesIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCompaniesId(ctx, request.(PutCompaniesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCompaniesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCompaniesIdResponseObject); ok {
		if err := validResponse.VisitPutCompaniesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostJobPostings operation middleware
func (sh *strictHandler) PostJobPostings(ctx *gin.Context) {
	var request PostJobPostingsRequestObject

	var body PostJobPostingsJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostJobPostings(ctx, request.(PostJobPostingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostJobPostings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostJobPostingsResponseObject); ok {
		if err := validResponse.VisitPostJobPostingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJobPostingsId operation middleware
func (sh *strictHandler) DeleteJobPostingsId(ctx *gin.Context, id int64) {
	var request DeleteJobPostingsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJobPostingsId(ctx, request.(DeleteJobPostingsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJobPostingsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteJobPostingsIdResponseObject); ok {
		if err := validResponse.VisitDeleteJobPostingsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutJobPostingsId operation middleware
func (sh *strictHandler) PutJobPostingsId(ctx *gin.Context, id int64) {
	var request PutJobPostingsIdRequestObject

	request.Id = id

	var body PutJobPostingsIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutJobPostingsId(ctx, request.(PutJobPostingsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutJobPostingsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutJobPostingsIdResponseObject); ok {
		if err := validResponse.VisitPutJobPostingsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYb2/TRhj/Lre9DCTdCi/8jsE2BaGB0LQ3CEVOfC1X+R/nM6JCkTh7QAdFVEyFAZsA",
	"jUEpIoDGBoOOfZinSeFbTHfnJLZzaR2aBibtnR37nue55/fnOecManiO77nYZQEyzqCgcQI7przc7zm+",
	"6c6LS596PqaMYPmgHgbExUFQs3DQoMRnxHPF725o22bdxshgNMQlxOZ9jAwUMErcWdQsoQbFJsNWzWTi",
	"9RmPOuIKWSbDuxhxMNKtCQPmObUZgm1LZicMO/LiU4pnkIE+Kfd3UE7KL++Xq74Si0SQJKpJqTkv7omV",
	"KYC4bO90PzlxGZ7FVLw459Vrvhcw4s4WT37Qqx9Ra3S5XdPBIsLATkPfGrE7zRKi+GRIKLaQcUzsKgmf",
	"aXUm8vFeEK8+hxtMJE6Arrp+yIqj7ZinD2F3lp1AxlSlUikVgH+7UKoKN+lptqYScojbu9+qezKGtj0p",
	"Lg10p+G5DLtMC+j70F02pzaUI4WJOx4ypaop9bY6Irny8G3WwhR+ewR+W7Qn8/poaGt3pqv/oFf/nwDb",
	"IUC2gf9VDnQNXVO5NM9aYWAmNwRz1NX45qgDvPAmGWH2Tk65VNe7yUZmZQLpUEaOiusYMBo64LY9e3uA",
	"bGdEaro+2FuxiLgznkiWKRutr/HOb4878bn2nWfAVzrPovVXr7q3rY3W3Y2l8xBdfXt3Efj5fUeqvSS9",
	"pakV6vkpTAMVfGp3ZXdF7NTzsWv6BBnoc/lTCfkmOyGBKKsNJAjPYjZYY/vcCvD7wFu5YoH/AtEi8Ecb",
	"z5fWX/8E/Eqm/Ohq+8q19pvrwK8DfwP8BpKFUFOErVrIQF9jtr+XXdRETQczTANkHMsXAfFNiNcgermx",
	"vNq+8gKJhiIDnQwxne8e8Qzkm7OC9YpJElriEid00kD2+Nks5ZNM9bIAj4Dfhuii2PbrPzvLT+FsBPEF",
	"iJchegjxI4gX2mfvAX+yF/gD4DfgbDSkJps4hGWKsvCMGdoMGXtLgntJgQnzhpd7XDAv8D03UGB9Vqnk",
	"5oTp+zZpyAaX5wKli35anZiTm2KnzuTjR6NFtce+t6U8QEKifcI8Ztq6R1qJKY6oNaUu0CqvXnBZaDsL",
	"S+2Lt0XaadW2nA5fXu48/hX4KsSrED2BaAWivyBeEAv26BZA9IdgSrwk+bIC8UOI12TpQeg4Jp3XKhR4",
	"S4lCdsYLNGrrXHsqFfN9Rm3R1fW/f+4sLA0Xk7DutJpEB3HAvvCs+ZFYUoABiSVncRIm2xxg6NS4c+uw",
	"Va0ZQPg9hYEp9ahOL5bkMT5tOr404O/2Haoe2Pdt9fA3tS+PHj18VHdKsTAziZ3VWDbuTPcM3Q+cHL8G",
	"gjk4CBI19V9WNGkvXQb+pP3PuXd3FpQhaQ8NAzM/L2RtCsnyVel+axC9gPgBxL/3SV8gUbOAQrfIMgYh",
	"diWo+CLf6Y+/8hliNVV4GzOsEebihXbrJvBlOfRuq5jAW/1x98PFdzfuDVfoARm4p9GqhQbkMq2ZvjJq",
	"mtzTw44RwBff3r8E/B7wS3J0vQF+C6Ifx9k7VY4y9k3GtVpVPdCdieK80R+JxEJ560jPxy1PlmIUJifU",
	"ETHq3HreNVi9i4YsD9DHYKOVSdio6s02BuUHpqaqX8l6zqvvSv9JucWszR1ci8za/tfSTk3b/PfYhAdu",
	"+i/bwjN3Aqeq3HkqbeZp1Ef18/y3SyEzT5FgnHauatkRzeRPo8XsXK360Haeg6iAlw/i85HItDIhme6M",
	"p0+Onz1PFy9heqpLz5DayEBl0yflU1Ooebz5bwAAAP//f0J04rUbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "time")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "uuid")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
